version: "3.8"

services:
  coredns:
    image: coredns/coredns:latest
    command: -conf /etc/coredns/Corefile
    volumes:
      - ./coredns/Corefile:/etc/coredns/Corefile:ro
    ports:
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 53
        published: 53
        protocol: tcp
        mode: host
    labels:
      - "vector.collect.logs=coredns"
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  vector:
    image: timberio/vector:latest-alpine
    command: ["--config", "/etc/vector/vector.toml"]
    env_file: .env
    environment:
      - NATS_URL=${NATS_URL}
      - NATS_LOG_SUBJECT=${NATS_LOG_SUBJECT}
    volumes:
      - ./vector/vector.toml:/etc/vector/vector.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  ml-model:
    build: ./ml-model
    image: ml-model:latest
    env_file: .env
    volumes:
      - ./config/allowlist.txt:/config/allowlist.txt:ro
    networks: [netw]
    deploy:
      replicas: 3
      update_config:
        order: start-first
        parallelism: 1
      restart_policy: { condition: on-failure }

  nats:
    image: nats:latest
    command: "-js"
    ports:
      - target: 4222
        published: 4222
        protocol: tcp
      - target: 8222
        published: 8222
        protocol: tcp
    volumes:
      - nats-data:/data
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    env_file: .env
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=${CLICKHOUSE_DATABASE}
    ports:
      - target: 8123
        published: 8123
        protocol: tcp
        mode: host
      - target: 9000
        published: 9000
        protocol: tcp
        mode: host
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse:/docker-entrypoint-initdb.d
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  grafana:
    image: grafana/grafana-oss:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-clickhouse-datasource
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    volumes:
      - ./grafana/dashboard:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  postgres:
    image: postgres:13-alpine
    security_opt: ["no-new-privileges:true"]
#    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - TZ
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 45s
      timeout: 45s
      retries: 1
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  mattermost:
    build:
      context: ./mattermost
      dockerfile: Dockerfile
    image: mattermost:latest
    depends_on: [postgres]
    command: >
      sh -c "wait-for postgres:5432 -t 60 -- /opt/mattermost/bin/mattermost"
    security_opt: ["no-new-privileges:true"]
    read_only: false
    tmpfs: [ /tmp ]
    volumes:
      - mattermost-data:/mattermost/data
      - mattermost-data:/mattermost/logs
      - mattermost-data:/mattermost/config
      - mattermost-data:/mattermost/plugins
      - mattermost-data:/mattermost/client/plugins
      - mattermost-data:/mattermost/bleve-indexes
      - ./mattermost/mattermost-setup.sh:/opt/mattermost/mattermost-setup.sh:ro
      - mattermost-config-exchange:/mattermost-config
    env_file: .env
    environment:
      - TZ
      - MM_SQLSETTINGS_DRIVERNAME
      - MM_SQLSETTINGS_DATASOURCE=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=10
      - MM_BLEVESETTINGS_INDEXDIR
      - MM_SERVICESETTINGS_SITEURL
      - MM_SERVICESETTINGS_ENABLELOCALMODE=${MM_SERVICESETTINGS_ENABLELOCALMODE}
      - SETUP_ADMIN_USERNAME=${MM_ADMIN_USERNAME}
      - SETUP_ADMIN_PASSWORD=${MM_ADMIN_PASSWORD}
      - SETUP_ADMIN_EMAIL=${MM_ADMIN_EMAIL}
      - SETUP_MATTERMOST_URL=${MATTERMOST_BASE_URL}
      - MM_PLUGINSETTINGS_ENABLEUPLOADS=false
      - MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS=false
    ports:
      - target: 8065
        published: 8065
        protocol: tcp
        mode: host
    networks: [netw]
    deploy:
      restart_policy: { condition: on-failure }

  notification-service:
    build: ./notification-service
    image: notification-service:latest
    env_file: .env
    volumes:
      - mattermost-config-exchange:/mattermost-config:ro
    networks: [netw]
    depends_on: [nats, mattermost]
    deploy:
      restart_policy: { condition: on-failure }

  test-client:
    build: ./test-client
    image: test-client:latest
    stdin_open: true
    tty: true
    networks: [netw]
    deploy:
      restart_policy: { condition: none }

volumes:
  clickhouse-data:
  nats-data:
  grafana-data:
  mattermost-data:
  mattermost-config-exchange:
  postgres-data:

networks:
  netw:
    external: true
